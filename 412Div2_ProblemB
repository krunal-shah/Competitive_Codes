#include <iostream>
#include <string.h>
#include <math.h>
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;


// Be forewarned, dirty solution ahead
int main(int argv, char* args[])
{
	int n, m;
	cin >> n >> m;
	char ch[m+2];
	int a[n][m+2], mm[n][2], ans[n][2], temp, mini = 999999, max = -1, top_heights = 0;
	bool top_heights_bool = true;
	for(int i=0; i<n; i++)
	{
		mini = 999999; max = -1;
		cin >> ch;
		for(int j=0; j<m+2; j++)
		{
			temp = ch[j];
			if(temp == '1')
			{
				if(j > max)
					max = j;
				if(j < mini)
					mini = j;
			}
		}
		if( top_heights_bool==true &&  max == -1)
		{
			top_heights++;
		}
		else
		{
			top_heights_bool = false;
		}
		mm[i][0] = mini;
		mm[i][1] = max;
	}
	
	

	for(int i=0; i<top_heights; i++)
	{
		ans[i][0] = 0;
		ans[i][1] = 0;
	}
	if(top_heights<n)
	{
		ans[top_heights][0] = mm[top_heights][1];
		ans[top_heights][1] = m+1-mm[top_heights][0];
		
		for(int i=top_heights+1; i<n; i++)
		{
			if(mm[i][0] == 999999 && mm[i][1] == -1)
			{
				ans[i][0] = min(ans[i-1][0] , m+1+ans[i-1][1]) + 1;
				ans[i][1] = min(m+1+ans[i-1][0], ans[i-1][1]) + 1;
			}
			else
			{
				ans[i][0] = min(ans[i-1][0] + 2*mm[i][1], m+1+ans[i-1][1]) + 1;
				ans[i][1] = min(m+1+ans[i-1][0], 2*(m+1-mm[i][0])+ans[i-1][1]) + 1;
			}
		}
		/*for(int i=0; i<n; i++)
		{
			cout << ans[i][0] << " " << ans[i][1] << endl;
		}*/
	}
	cout << ans[n-1][0] << endl;
}
